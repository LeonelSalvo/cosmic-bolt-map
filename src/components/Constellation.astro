---
import type { NodePosition } from '../types/MindMap';
import Star from './Star.astro';

interface Props {
  nodes: NodePosition[];
}

const { nodes } = Astro.props;

function generatePaths(): Array<{ path: string; level: number }> {
  const paths: Array<{ path: string; level: number }> = [];
  for (let i = 1; i < nodes.length; i++) {
    const start = nodes[i-1];
    const end = nodes[i];
    const level = Math.max(start.level, end.level);
    paths.push({
      path: `M ${start.x} ${start.y} L ${end.x} ${end.y}`,
      level
    });
  }
  return paths;
}

const constellationPaths = generatePaths();
---

<svg width="100%" height="100vh" class="constellation">
  <defs>
    <filter id="glow">
      <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>

  {constellationPaths.map(({path, level}) => {
    const opacity = Math.max(0.1, 0.6 - level * 0.15);
    return (
      <path 
        d={path} 
        class="constellation-line"
        style={`--line-opacity: ${opacity}`}
      />
    );
  })}

  {nodes.map(({x, y, node, level}) => (
    <Star x={x} y={y} label={node.label} level={level} />
  ))}
</svg>

<style>
  .constellation {
    background-color: #0a0a2a;
  }

  .constellation-line {
    stroke: rgba(255, 255, 255, var(--line-opacity));
    stroke-width: 1;
    fill: none;
    animation: blink 3s ease-in-out infinite;
  }

  @keyframes blink {
    0%, 100% { 
      stroke: rgba(255, 255, 255, calc(var(--line-opacity) * 0.3));
      stroke-width: 1;
    }
    50% { 
      stroke: rgba(255, 255, 255, var(--line-opacity));
      stroke-width: 2;
    }
  }
</style>